// Function Call Graph
digraph {
	rankdir=LR
	move [label=move]
	selection_cooldown [label=selection_cooldown]
	get_cost_by_index [label=get_cost_by_index]
	get_value_by_index [label=get_value_by_index]
	load_api_key [label=load_api_key]
	create_map [label=create_map]
	parse_decision [label=parse_decision]
	flame [label=flame]
	animate [label=animate]
	add_exp [label=add_exp]
	reflect_images [label=reflect_images]
	show_bar [label=show_bar]
	trigger [label=trigger]
	heal [label=heal]
	get_full_weapon_damage [label=get_full_weapon_damage]
	cooldown [label=cooldown]
	show_exp [label=show_exp]
	get_full_magic_damage [label=get_full_magic_damage]
	enemy_update [label=enemy_update]
	update_text [label=update_text]
	import_folder [label=import_folder]
	display_text [label=display_text]
	flickering [label=flickering]
	selection_box [label=selection_box]
	get_status [label=get_status]
	__init__ [label=__init__]
	debug [label=debug]
	display_bar [label=display_bar]
	player_attack_logic [label=player_attack_logic]
	read_data [label=read_data]
	toggle_menu [label=toggle_menu]
	magic_overlay [label=magic_overlay]
	weapon_overlay [label=weapon_overlay]
	get_distance_direction [label=get_distance_direction]
	hitbox_collide [label=hitbox_collide]
	get_damage [label=get_damage]
	input [label=input]
	allign [label=allign]
	import_csv_layout [label=import_csv_layout]
	update [label=update]
	run [label=run]
	display [label=display]
	display_names [label=display_names]
	collision [label=collision]
	interaction [label=interaction]
	trigger_death_particles [label=trigger_death_particles]
	check_collision [label=check_collision]
	check_death [label=check_death]
	actions [label=actions]
	write_memory [label=write_memory]
	create_magic [label=create_magic]
	create_particles [label=create_particles]
	hit_reaction [label=hit_reaction]
	save_observation [label=save_observation]
	custom_draw [label=custom_draw]
	destroy_attack [label=destroy_attack]
	import_graphics [label=import_graphics]
	wave_value [label=wave_value]
	create_items [label=create_items]
	energy_recovery [label=energy_recovery]
	get_player_distance_direction [label=get_player_distance_direction]
	import_player_assets [label=import_player_assets]
	write_data [label=write_data]
	attack [label=attack]
	create_attack [label=create_attack]
	cooldowns [label=cooldowns]
	create_grass_particles [label=create_grass_particles]
	damage_player [label=damage_player]
	__init__ -> "pygame.Surface"
	__init__ -> super
	flame -> range
	flame -> randint
	import_csv_layout -> open
	import_csv_layout -> reader
	import_csv_layout -> "terrain_map.append"
	import_csv_layout -> list
	import_folder -> walk
	import_folder -> "surface_list.append"
	__init__ -> "pygame.Rect"
	__init__ -> "weapon_data.values"
	__init__ -> "magic_data.values"
	show_bar -> "bg_rect.copy"
	show_exp -> str
	show_exp -> int
	show_exp -> "text_surf.get_rect"
	show_exp -> "text_rect.inflate"
	selection_box -> "pygame.Rect"
	weapon_overlay -> "self.selection_box"
	weapon_overlay -> "weapon_surf.get_rect"
	magic_overlay -> "self.selection_box"
	magic_overlay -> "magic_surf.get_rect"
	display -> "self.show_bar"
	display -> "self.show_exp"
	display -> "self.weapon_overlay"
	display -> "self.magic_overlay"
	__init__ -> len
	__init__ -> list
	__init__ -> "self.create_items"
	create_items -> enumerate
	create_items -> range
	create_items -> Item
	display -> "self.input"
	display -> "self.selection_cooldown"
	display -> enumerate
	display -> "item.display"
	display_names -> "title_surf.get_rect"
	display_names -> int
	display_names -> "cost_surf.get_rect"
	display_names -> "surface.blit"
	display_bar -> "pygame.Rect"
	trigger -> list
	display -> "self.display_names"
	display -> "self.display_bar"
	__init__ -> import_folder
	__init__ -> "self.reflect_images"
	reflect_images -> "new_frames.append"
	create_grass_particles -> choice
	create_grass_particles -> ParticleEffect
	create_particles -> ParticleEffect
	animate -> len
	animate -> "self.kill"
	animate -> int
	update -> "self.animate"
	__init__ -> "self.import_player_assets"
	__init__ -> "weapon_data.keys"
	__init__ -> "magic_data.keys"
	import_player_assets -> import_folder
	input -> "self.create_attack"
	input -> list
	input -> "magic_data.keys"
	input -> "magic_data.values"
	input -> "self.create_magic"
	input -> len
	input -> "weapon_data.keys"
	cooldowns -> "self.destroy_attack"
	animate -> "self.wave_value"
	get_value_by_index -> list
	get_cost_by_index -> list
	update -> "self.input"
	update -> "self.cooldowns"
	update -> "self.get_status"
	update -> "self.move"
	update -> "self.energy_recovery"
	__init__ -> YSortCameraGroup
	__init__ -> "self.create_map"
	__init__ -> UI
	__init__ -> Upgrade
	__init__ -> AnimationPlayer
	__init__ -> MagicPlayer
	create_map -> import_csv_layout
	create_map -> import_folder
	create_map -> "layouts.items"
	create_map -> enumerate
	create_map -> Tile
	create_map -> choice
	create_map -> int
	create_map -> Player
	create_map -> Enemy
	create_attack -> Weapon
	player_attack_logic -> range
	player_attack_logic -> randint
	player_attack_logic -> "target_sprite.kill"
	player_attack_logic -> "target_sprite.get_damage"
	run -> "self.player_attack_logic"
	custom_draw -> sorted
	custom_draw -> "self.sprites"
	enemy_update -> "self.sprites"
	enemy_update -> hasattr
	enemy_update -> "enemy.enemy_update"
	debug -> "font.render"
	debug -> str
	debug -> "debug_surf.get_rect"
	debug -> "display_surface.blit"
	move -> "self.collision"
	wave_value -> sin
	__init__ -> "pygame.init"
	__init__ -> Level
	__init__ -> "main_sound.set_volume"
	__init__ -> "main_sound.play"
	run -> "pygame.quit"
	run -> "sys.exit"
	run -> debug
	__init__ -> "self.import_graphics"
	import_graphics -> import_folder
	get_status -> "self.get_player_distance_direction"
	actions -> "self.damage_player"
	actions -> "self.get_player_distance_direction"
	get_damage -> "self.get_player_distance_direction"
	get_damage -> "player.get_full_weapon_damage"
	get_damage -> "player.get_full_magic_damage"
	check_death -> "self.kill"
	check_death -> "self.trigger_death_particles"
	check_death -> "self.add_exp"
	update -> "self.hit_reaction"
	update -> "self.check_death"
	enemy_update -> "self.get_status"
	enemy_update -> "self.actions"
	write_memory -> "os.makedirs"
	write_memory -> open
	write_memory -> "f.readlines"
	write_memory -> len
	write_memory -> "f.writelines"
	write_memory -> "f.write"
	save_observation -> "time.strftime"
	save_observation -> int
	save_observation -> get_distance_direction
	save_observation -> "nearby_entities.append"
	save_observation -> "nearby_objects.append"
	save_observation -> "self.write_memory"
	write_data -> "os.makedirs"
	write_data -> open
	write_data -> "f.write"
	read_data -> open
	read_data -> "f.read"
	update_text -> "text_surface.get_rect"
	update_text -> "pygame.Surface"
	__init__ -> "self.load_api_key"
	load_api_key -> open
	load_api_key -> "file.read"
	load_api_key -> OpenAI
	load_api_key -> print
	__init__ -> API
	__init__ -> MemoryStream
	input -> "item.trigger"
	display_text -> "title_surf.get_rect"
	display_text -> int
	display_text -> "cost_surf.get_rect"
	display_text -> "surface.blit"
	display -> "self.display_text"
	create_grass_particles -> "random.choice"
	__init__ -> "self.allign"
	update -> "self.allign"
	__init__ -> "self.get_full_weapon_damage"
	input -> "self.get_full_weapon_damage"
	input -> "self.get_full_magic_damage"
	flickering -> wave_value
	update -> "self.flickering"
	create_map -> "random.choice"
	create_map -> Weapon
	collision -> "target_sprite.kill"
	collision -> range
	collision -> "random.randint"
	collision -> "target_sprite.get_damage"
	import_graphics -> "animations.keys"
	import_graphics -> walk
	import_graphics -> "surface_list.append"
	get_damage -> "attacker.get_full_weapon_damage"
	get_damage -> "attacker.get_full_magic_damage"
	get_damage -> "self.kill"
	get_damage -> "self.add_exp"
	__init__ -> Persona
	parse_decision -> "json.loads"
	parse_decision -> len
	parse_decision -> ValueError
	parse_decision -> float
	parse_decision -> print
	move -> "desired_direction.magnitude"
	move -> "desired_direction.normalize"
	move -> hasattr
	move -> "pos_difference.length"
	move -> getattr
	move -> "self.check_collision"
	move -> min
	check_collision -> "test_rect.colliderect"
	attack -> "target.get_damage"
	interaction -> TextBubble
	interaction -> "self.parse_decision"
	interaction -> get_distance_direction
	interaction -> "self.attack"
	interaction -> any
	update -> "self.cooldown"
	enemy_update -> get_distance_direction
	enemy_update -> "self.move"
	enemy_update -> "self.interaction"
}
